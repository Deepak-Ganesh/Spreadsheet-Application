/// <summary>
///   Original Author: Joe Zachary
///   Further Authors: H. James de St. Germain
///   
///   Dates          : 2012-ish - Original 
///                    2020     - Updated for use with ASP Core
///                    
///   This code represents a Windows Form element for a Spreadsheet. It includes
///   a Menu Bar with two operations (close/new) as well as the GRID of the spreadsheet.
///   The GRID is a separate class found in SpreadsheetGridWidget
///   
///   This code represents manual elements added to the GUI as well as the ability
///   to show a pop up of information, and the event handlers for a New window and to Close the window.
///
///   See the SimpleSpreadsheetGUIExample.Designer.cs for "auto-generated" code.
///   
///   This code relies on the SpreadsheetPanel "widget"
///  

/// <summary> 
/// Author:    [Deepak] 
/// Partner:   [Keaton] 
/// Date:      [2/21/19] 
/// Course:    CS 3500, University of Utah, School of Computing 
/// Copyright: CS 3500 and [Your Name(s)] - This work may not be copied for use in Academic Coursework. 
/// 
/// I, [Deepak; Keaton], certify that I wrote this code from scratch and did not copy it in part or whole from  
/// another source.  All references used in the completion of the assignment are cited in my README file. 
/// 
/// File Contents 
/// This file contains the SimpleSpreadsheetGUI class which is the main portion of the controller of our spreadsheeet application
/// it interacts with the model based on events sent from the view. It includes all the methods used to update the spreadsheet behind 
/// the seens as well as saving, opening, and closing spreadheet (.sprd) files.
///     
/// </summary>

using SpreadsheetGrid_Framework;
using System;
using System.Windows.Forms;
using SS;
using SpreadsheetUtilities;
using System.ComponentModel;

namespace SpreadsheetPanel
{
    /// <summary>
    /// This class represents the main portion of our controller for the spreadsheet GUI. It implements all methods called by events in the 
    /// view (the GUI itself) and manipulates the background spreadsheet represented by our Spreadsheet class to represent what is shown on the
    /// GUI.
    /// </summary>
    public partial class SimpleSpreadsheetGUI : Form
    {
        /// <summary>
        /// Private variables
        /// </summary>
        private int oldRow;
        private int oldCol;
        bool operationFail = false;
        bool extraFeatureUsed = false;
        private string CellContentsofSpreadsheetTextbox = "";
        private AbstractSpreadsheet Model_Spreadsheet;

        /// <summary>
        /// The basic constructor when a new spreadsheet is created 
        /// </summary>
        public SimpleSpreadsheetGUI()
        {
            Model_Spreadsheet = new Spreadsheet();
            this.grid_widget = new SpreadsheetGridWidget();

            // Call the AutoGenerated code
            InitializeComponent();

            // Add event handler and select a start cell
            grid_widget.SelectionChanged += DisplaySelection;
            grid_widget.SetSelection(2, 3, false);

            
            grid_widget.GetSelection(out oldCol, out oldRow);
            Cell_Name_Label.Text = "Cell Name: " + getCellName(oldCol, oldRow);

        }
        /// <summary>
        /// The constructor is called when saved spreadsheet is opened
        /// </summary>
        /// <param name="fileName"></param>
        public SimpleSpreadsheetGUI(string fileName)
        {
            //Opens the files and saves the contents to the Model
            try
            {
                Model_Spreadsheet = new Spreadsheet(fileName, s => true, str => str, "default");
            }
            catch (Exception ex)
            {
                throw ex;
            }

            this.grid_widget = new SpreadsheetGridWidget();

            // Call the AutoGenerated code
            InitializeComponent();

            // Add event handler and select a start cell
            grid_widget.SelectionChanged += DisplaySelection;
            grid_widget.SetSelection(2, 3, false);

            //populate spreadsheet with saved data
            popuulateGUI();

            int col, row;
            grid_widget.GetSelection(out col, out row);
            string CellName = getCellName(col, row);

            Cell_Name_Label.Text = "Cell Name: " + CellName;
            Cell_Value_Label.Text = "Cell Value: " + Model_Spreadsheet.GetCellValue(CellName).ToString();


        }

        

        /// <summary>
        /// The methods grabs the selected cell name, the contents of the selected cell
        /// and the selected cell value then displays it on the GUI.
        /// </summary>
        /// <param name="ss"></param>
        private void DisplaySelection(SpreadsheetGridWidget ss)
        {
            //Grab contents of textbox in spreadsheet and put it into the spreadsheet if enter is pressed
            string spreadsheetTextbox = ss.getContents();
            if (null != spreadsheetTextbox)
            {
                CellContentsofSpreadsheetTextbox = spreadsheetTextbox;
                extraFeatureUsed = true;
                bg_worker.RunWorkerAsync();
            }

            int row, col;
            
            
            string value;
            ss.GetSelection(out col, out row);


            string CellName = getCellName(col, row);

            ss.GetValue(col, row, out value);
            Cell_Name_Label.Text = "Cell Name: " + CellName;
            Object CellContents = Model_Spreadsheet.GetCellContents(CellName);

            //The if else puts the contents of a cell into both textboxes
            if (CellContents is Formula)
            {
                cell_Input_Textbox.Text = "=" + ((Formula)CellContents).ToString();
                ss.set_InputTextboxLocation("=" + ((Formula)CellContents).ToString());
            }
            else
            {
                cell_Input_Textbox.Text = CellContents.ToString();
                ss.set_InputTextboxLocation(CellContents.ToString());
            }

            //Put the cell value in to the Cell value label and spreadsheet
            if (Model_Spreadsheet.GetCellValue(CellName) is FormulaError)
            {
                Cell_Value_Label.Text = "Cell Value: " + ((FormulaError)Model_Spreadsheet.GetCellValue(CellName)).Reason;
            }
            else
            {
                Cell_Value_Label.Text = "Cell Value: " + Model_Spreadsheet.GetCellValue(CellName).ToString();
            }
           syncingModelWithGUI();
            
            oldCol = col;
            oldRow = row;
        }

        

        
        /// <summary>
        /// The method opens a new blank spreadsheet when New is clicked.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void NewToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Tell the application context to run the form on the same
            // thread as the other forms.
            Spreadsheet_Window.getAppContext().RunForm(new SimpleSpreadsheetGUI());
        }

        /// <summary>
        /// The method closes the spreadsheet when File=>Close is clicked
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void CloseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            
                Close();
            
        }

        /// <summary>
        /// This method is called when the form is being closed after clicking the red "X" in the top right hand corner of the GUI.
        /// It first checks to see if the spreadsheet has been changed and not saved. If this is the case it overrides the normal closing
        /// procedure and displays a message to the user asking if they want to close the application without saving.
        /// </summary>
        /// <param name="e">Event e</param>
        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            //If spreadsheet has changed without a save override form close to ask user if they want to close
            if (Model_Spreadsheet.Changed)
            {
                base.OnFormClosing(e);
                if (e.CloseReason == CloseReason.WindowsShutDown) return;
                // Confirm user wants to close
                switch (MessageBox.Show(this, "Are you sure you want to close without saving?", "", MessageBoxButtons.YesNo))
                {
                    case DialogResult.No:
                        e.Cancel = true;
                        break;
                    default:
                        break;
                }
            }
        }

        /// <summary>
        /// This method is called from the event triggered when the "Submit Input" button on the GUI is called. It triggers the background worker
        /// to do calculations asyncronously with the background spreasheet so as not to lock up the GUI while longer calculations are being 
        /// performed.
        /// </summary>
        /// <param name="sender"> not used </param>
        /// <param name="e"> not used </param>
        private void submit_button_Click(object sender, EventArgs e)
        {
            //add cell contents into the Model
            bg_worker.RunWorkerAsync();
            object objLock = new object();
            //Wait for the contents to be added to the Model before moving on.
            lock(objLock)
            {
                if(!operationFail)
                    setContentsOfGUI(cell_Input_Textbox.Text.ToString());
            }
            operationFail = false;

        }

        /// <summary>
        /// This method is called when the background worker starts its work. It sets the contents of of the cell in the model spreadsheet, thus 
        /// separating this process from the GUI itself.
        /// </summary>
        /// <param name="sender">not used</param>
        /// <param name="e">not used</param>
        private void addContentsIntoModel(object sender, DoWorkEventArgs e)
        {
           
            string CellName = getCellName(oldCol,oldRow);
            try
            {
                //Add contents of cell into the Model_Spreadsheet
                if (extraFeatureUsed)
                {
                    Model_Spreadsheet.SetContentsOfCell(CellName, CellContentsofSpreadsheetTextbox);
                    extraFeatureUsed = false;
                }
                else
                    Model_Spreadsheet.SetContentsOfCell(CellName, cell_Input_Textbox.Text.ToString());
            }
            catch (CircularException)
            {
                operationFail = true;
                MessageBox.Show("You have a cell which is dependent on itself");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                operationFail = true;
            }
            syncingModelWithGUI();
        }

        
        

        /// <summary>
        /// This method is used to open a .sprd file and is called by the event triggered by pressing the "Open" button in the drop-down file menu.
        /// </summary>
        /// <param name="sender">not used</param>
        /// <param name="e">not used</param>
        private void Open_Menu_Option_Click(object sender, EventArgs e)
        {
            var fileContent = string.Empty;
            var filePath = string.Empty;

            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                //File explorer setting
                openFileDialog.DefaultExt = "sprd";
                openFileDialog.Filter = "sprd files (*.sprd)|*.sprd|All files (*.*)|*.*";
                openFileDialog.FilterIndex = 0;
                openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    //Get the path of specified file
                    filePath = openFileDialog.FileName;
                    try
                    {
                        Spreadsheet_Window.getAppContext().RunForm(new SimpleSpreadsheetGUI(filePath));
                    }
                    catch (Exception)
                    {
                        MessageBox.Show("The file was not readable");
                    }
                }
            }
        }

        /// <summary>
        /// This method is triggered by the event caused by clicking the "Save" button in the drowp-down file menu, and allows you to save the
        /// spreadsheet to the working directory or a specified filepath.
        /// </summary>
        /// <param name="sender">not used</param>
        /// <param name="e">not used</param>
        private void Save_Menu_Option_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog1 = new SaveFileDialog();
            //saveFileDialog settings
            saveFileDialog1.Filter = "sprd files (*.sprd)|*.sprd|All files (*.*)|*.*";
            saveFileDialog1.FilterIndex = 0;
            saveFileDialog1.RestoreDirectory = true;

            //save the file
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                string filePath = saveFileDialog1.FileName;
                Model_Spreadsheet.Save(filePath);
            }
        }

        /// <summary>
        /// The methods opens a message box telling the user how to use the spreadsheet when
        /// the Help button is clicked
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Help_Menu_Option_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Extra Feature:\n\t" +
                "Check the checkbox in the left corner of the screen to turn on the extra feature. The" +
                "extra feature allows the user to type directly into the spreadsheet. When using the extra " +
                "feature the user must press enter on keyboard to confirm that's what they want to be " +
                "put into the cell.\n\n " +
                "\nEntering data into Spreadsheet: " +
                "\nInput Method 1:\n\tThe first way is to select a cell and then put stuff into the" +
                "Cell contents textbox in the left corner of the screen. After you are good with" +
                "what should go into the cell click the submit Input button or click enter on the keyboard" +
                "\nInput Method 2:\n\tThe other way you may input data is by checking the extra feature" +
                "check box. This will allow you to type contents dircetly into the spreadsheet. Once" +
                "you are good with you typed then press enter on the keyboard to submit you input.\n\n" +
                "Opening and Saving Files:" +
                "\nSaving Spreadsheet:\n\tTo save your spreadsheet click File then save in the" +
                "corner of the screen. A File Explorer window will open. Type the name and " +
                "choose location you wish to save your file then click save. The default save file extension " +
                "is sprd file. If you don't want to save the data in a sprd file then change the " +
                "file type to all file then save in the format you wish to save in." +
                "\nOpening Files:\n\t You may either open a new spreadsheet by clicking on file then new or you may " +
                "click file then open to open a spreadsheet aldready saved. By clicking on open a " +
                "a file explorer window will open up and there you can select your file and open it by clicking on open. ");

        }

        /// <summary>
        /// This method is triggered when the check box in the GUI is clicked and this makes the textbox extra feature (textbox appears on the drawing
        /// panel to create the illusion that the user is typing directly into the cell) visible so that it can be used by the user.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void extraFeatureCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if ((sender as CheckBox).Checked)
            {
                this.grid_widget.setVisible(true);
            }
            else
            {
                this.grid_widget.setVisible(false);
            }
        }


        // Handle the KeyDown event to determine the type of character entered into the control.
        /// <summary>
        /// If enter is pressed the contents of the Cell Input Value textbox in the left corner
        /// of the GUI the contents of the textbox will be put into the spreadsheet
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cell_Input_Textbox_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {

            if (e.KeyCode == Keys.Enter)
            {
                bg_worker.RunWorkerAsync();
            }

        }


        /********************----------------------------Private Methods Helper Methods-----------------------*****************************************/

        /// <summary>
        /// This method updates the GUI cells so that they display the correct values obtained from the Model spreadsheet.
        /// </summary>
        private void syncingModelWithGUI()
        {
       
            int col, row;
            foreach (string cellName in Model_Spreadsheet.GetNamesOfAllNonemptyCells())
            {
                string letters = "ABCDEFGHIJKLMNOMPQRSTUVWXYZ";
                col = letters.IndexOf(cellName[0]);

                row = int.Parse(cellName.Substring(1, cellName.Length - 1)) - 1;
                object cellValue = Model_Spreadsheet.GetCellValue(cellName);

                if (cellValue is FormulaError)
                {
                    grid_widget.SetValue(col, row, ((FormulaError)cellValue).Reason);
                }
                else
                {
                    grid_widget.SetValue(col, row, cellValue.ToString());
                }
            }
        }


        /// <summary>
        /// This method updates the GUI 
        /// </summary>
        /// <param name="contentsofCell"></param>
        private void setContentsOfGUI(string contentsofCell)
        {
            int row = oldRow;
            int col = oldCol;

            try
            {
                string CellName = getCellName(oldCol,oldRow);
                //Update the speradsheet grid widget
                if (Model_Spreadsheet.GetCellValue(CellName) is FormulaError)
                    grid_widget.SetValue(col, row, ((FormulaError)Model_Spreadsheet.GetCellValue(CellName)).Reason);
                else
                    grid_widget.SetValue(col, row, Model_Spreadsheet.GetCellValue(CellName).ToString());

                //Update the Cell Value label
                if (Model_Spreadsheet.GetCellValue(CellName) is FormulaError)
                    Cell_Value_Label.Text = "Cell Value: " + ((FormulaError)Model_Spreadsheet.GetCellValue(CellName)).Reason;
                else
                    Cell_Value_Label.Text = "Cell Value: " + Model_Spreadsheet.GetCellValue(CellName).ToString();

            }
            catch (CircularException)
            {
                MessageBox.Show("You have a cell which is dependent on itself");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }


        /// <summary>
        /// The private method adds all the values add all the values from the model
        /// to the spreadsheet GUI. The method is only run when a saved spreadsheet
        /// is opened.
        /// </summary>
        private void popuulateGUI()
        {
            string letters = "ABCDEFGHIJKLMNOMPQRSTUVWXYZ";
            foreach (string CellName in Model_Spreadsheet.GetNamesOfAllNonemptyCells())
            {
                int col;
                int row;
                col = letters.IndexOf(CellName[0]);

                row = int.Parse(CellName.Substring(1, CellName.Length - 1)) - 1;

                this.grid_widget.SetValue(col, row, Model_Spreadsheet.GetCellContents(CellName).ToString());
            }
        }

        /// <summary>
        /// Method to return cell name given a column and row number of a cell
        /// </summary>
        /// <param name="col">column number</param>
        /// <param name="row">row number</param>
        /// <returns>string cell name</returns>
        private string getCellName(int col, int row)
        {
            string letters = "ABCDEFGHIJKLMNOMPQRSTUVWXYZ";
            return letters[col] + (row + 1).ToString();
        }


    }
}


